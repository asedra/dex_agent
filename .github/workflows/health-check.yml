name: Health Check Monitoring

on:
  schedule:
    # Run health checks every 15 minutes
    - cron: '*/15 * * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to check'
        required: true
        type: choice
        options:
        - all
        - development
        - staging
        - production
      deep_check:
        description: 'Run deep health checks'
        required: false
        default: false
        type: boolean

jobs:
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: 
          - ${{ github.event.inputs.environment == 'all' && 'development' || github.event.inputs.environment || 'development' }}
          - ${{ github.event.inputs.environment == 'all' && 'staging' || github.event.inputs.environment == 'all' && 'staging' || '' }}
          - ${{ github.event.inputs.environment == 'all' && 'production' || github.event.inputs.environment == 'all' && 'production' || '' }}
        exclude:
          - environment: ''
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set environment URLs
        id: urls
        run: |
          case "${{ matrix.environment }}" in
            "development")
              echo "frontend_url=http://dev.dexagents.local" >> $GITHUB_OUTPUT
              echo "backend_url=http://dev.dexagents.local:8080" >> $GITHUB_OUTPUT
              echo "nginx_url=http://dev.dexagents.local" >> $GITHUB_OUTPUT
              ;;
            "staging")
              echo "frontend_url=http://staging.dexagents.local" >> $GITHUB_OUTPUT
              echo "backend_url=http://staging.dexagents.local:8080" >> $GITHUB_OUTPUT
              echo "nginx_url=http://staging.dexagents.local" >> $GITHUB_OUTPUT
              ;;
            "production")
              echo "frontend_url=https://dexagents.com" >> $GITHUB_OUTPUT
              echo "backend_url=https://api.dexagents.com" >> $GITHUB_OUTPUT
              echo "nginx_url=https://dexagents.com" >> $GITHUB_OUTPUT
              ;;
          esac
      
      - name: Basic Health Checks
        run: |
          echo "üîç Running basic health checks for ${{ matrix.environment }}..."
          
          # Backend health check
          echo "Checking backend health..."
          if curl -f -s "${{ steps.urls.outputs.backend_url }}/api/v1/system/health" | jq -e '.status == "healthy"' > /dev/null; then
            echo "‚úÖ Backend is healthy"
            echo "BACKEND_STATUS=healthy" >> $GITHUB_ENV
          else
            echo "‚ùå Backend health check failed"
            echo "BACKEND_STATUS=unhealthy" >> $GITHUB_ENV
          fi
          
          # Frontend health check
          echo "Checking frontend health..."
          if curl -f -s "${{ steps.urls.outputs.frontend_url }}/api/health" | jq -e '.status == "healthy"' > /dev/null; then
            echo "‚úÖ Frontend is healthy"
            echo "FRONTEND_STATUS=healthy" >> $GITHUB_ENV
          else
            echo "‚ùå Frontend health check failed"
            echo "FRONTEND_STATUS=unhealthy" >> $GITHUB_ENV
          fi
          
          # Nginx health check
          echo "Checking nginx health..."
          if curl -f -s "${{ steps.urls.outputs.nginx_url }}/health" | grep -q "healthy"; then
            echo "‚úÖ Nginx is healthy"
            echo "NGINX_STATUS=healthy" >> $GITHUB_ENV
          else
            echo "‚ùå Nginx health check failed"
            echo "NGINX_STATUS=unhealthy" >> $GITHUB_ENV
          fi
      
      - name: Deep Health Checks
        if: github.event.inputs.deep_check == 'true' || env.BACKEND_STATUS == 'unhealthy' || env.FRONTEND_STATUS == 'unhealthy'
        run: |
          echo "üî¨ Running deep health checks for ${{ matrix.environment }}..."
          
          # Check database connectivity
          echo "Checking database connectivity..."
          curl -f -s "${{ steps.urls.outputs.backend_url }}/api/v1/agents" > /dev/null && echo "‚úÖ Database connectivity OK" || echo "‚ùå Database connectivity failed"
          
          # Check API endpoints
          echo "Testing API endpoints..."
          curl -f -s "${{ steps.urls.outputs.backend_url }}/api/v1/system/info" > /dev/null && echo "‚úÖ System info endpoint OK" || echo "‚ùå System info endpoint failed"
          
          # Check frontend routing
          echo "Testing frontend routing..."
          curl -f -s "${{ steps.urls.outputs.frontend_url }}/agents" > /dev/null && echo "‚úÖ Frontend routing OK" || echo "‚ùå Frontend routing failed"
          
          # Check WebSocket connectivity
          echo "Testing WebSocket connectivity..."
          # Add WebSocket test if available
          echo "‚ÑπÔ∏è WebSocket test not implemented"
      
      - name: Performance Checks
        if: github.event.inputs.deep_check == 'true'
        run: |
          echo "‚ö° Running performance checks for ${{ matrix.environment }}..."
          
          # Response time check
          echo "Measuring response times..."
          
          # Backend response time
          BACKEND_TIME=$(curl -o /dev/null -s -w '%{time_total}' "${{ steps.urls.outputs.backend_url }}/api/v1/system/health")
          echo "Backend response time: ${BACKEND_TIME}s"
          
          # Frontend response time
          FRONTEND_TIME=$(curl -o /dev/null -s -w '%{time_total}' "${{ steps.urls.outputs.frontend_url }}/api/health")
          echo "Frontend response time: ${FRONTEND_TIME}s"
          
          # Check if response times are acceptable (< 2 seconds)
          if (( $(echo "$BACKEND_TIME < 2.0" | bc -l) )); then
            echo "‚úÖ Backend response time acceptable"
          else
            echo "‚ö†Ô∏è Backend response time slow: ${BACKEND_TIME}s"
          fi
          
          if (( $(echo "$FRONTEND_TIME < 2.0" | bc -l) )); then
            echo "‚úÖ Frontend response time acceptable"
          else
            echo "‚ö†Ô∏è Frontend response time slow: ${FRONTEND_TIME}s"
          fi
      
      - name: Resource Usage Checks
        if: github.event.inputs.deep_check == 'true'
        run: |
          echo "üìä Checking resource usage for ${{ matrix.environment }}..."
          
          # This would typically connect to your monitoring system
          # For demo purposes, we'll simulate checks
          
          echo "CPU Usage: Simulated check - OK"
          echo "Memory Usage: Simulated check - OK"  
          echo "Disk Usage: Simulated check - OK"
          echo "Network Usage: Simulated check - OK"
      
      - name: Generate Health Report
        run: |
          echo "üìã Generating health report for ${{ matrix.environment }}..."
          
          TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          cat > health-report-${{ matrix.environment }}.json << EOF
          {
            "environment": "${{ matrix.environment }}",
            "timestamp": "$TIMESTAMP",
            "status": {
              "backend": "${{ env.BACKEND_STATUS }}",
              "frontend": "${{ env.FRONTEND_STATUS }}",
              "nginx": "${{ env.NGINX_STATUS }}"
            },
            "urls": {
              "frontend": "${{ steps.urls.outputs.frontend_url }}",
              "backend": "${{ steps.urls.outputs.backend_url }}",
              "nginx": "${{ steps.urls.outputs.nginx_url }}"
            },
            "deep_check": "${{ github.event.inputs.deep_check || 'false' }}"
          }
          EOF
          
          cat health-report-${{ matrix.environment }}.json
      
      - name: Upload Health Report
        uses: actions/upload-artifact@v4
        with:
          name: health-report-${{ matrix.environment }}
          path: health-report-${{ matrix.environment }}.json
          retention-days: 7
      
      - name: Alert on Failure
        if: env.BACKEND_STATUS == 'unhealthy' || env.FRONTEND_STATUS == 'unhealthy' || env.NGINX_STATUS == 'unhealthy'
        run: |
          echo "üö® HEALTH CHECK ALERT üö®"
          echo "Environment: ${{ matrix.environment }}"
          echo "Backend: ${{ env.BACKEND_STATUS }}"
          echo "Frontend: ${{ env.FRONTEND_STATUS }}" 
          echo "Nginx: ${{ env.NGINX_STATUS }}"
          echo "Timestamp: $(date -u)"
          
          # Here you would typically send alerts to:
          # - Slack/Discord/Teams
          # - Email
          # - PagerDuty/OpsGenie
          # - Monitoring systems
          
          exit 1  # Fail the job to trigger notifications

  health-summary:
    name: Health Summary
    runs-on: ubuntu-latest
    needs: health-check
    if: always()
    
    steps:
      - name: Download all health reports
        uses: actions/download-artifact@v4
        with:
          path: health-reports
      
      - name: Generate Health Summary
        run: |
          echo "# üè• Health Check Summary" > health-summary.md
          echo "" >> health-summary.md
          echo "**Check Time:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> health-summary.md
          echo "**Repository:** ${{ github.repository }}" >> health-summary.md
          echo "" >> health-summary.md
          
          echo "## üìä Environment Status" >> health-summary.md
          echo "" >> health-summary.md
          
          # Process each health report
          for report in health-reports/*/health-report-*.json; do
            if [ -f "$report" ]; then
              ENV=$(jq -r '.environment' "$report")
              BACKEND=$(jq -r '.status.backend' "$report")
              FRONTEND=$(jq -r '.status.frontend' "$report")
              NGINX=$(jq -r '.status.nginx' "$report")
              
              echo "### $ENV Environment" >> health-summary.md
              
              if [ "$BACKEND" = "healthy" ]; then
                echo "- ‚úÖ Backend: Healthy" >> health-summary.md
              else
                echo "- ‚ùå Backend: Unhealthy" >> health-summary.md
              fi
              
              if [ "$FRONTEND" = "healthy" ]; then
                echo "- ‚úÖ Frontend: Healthy" >> health-summary.md
              else
                echo "- ‚ùå Frontend: Unhealthy" >> health-summary.md
              fi
              
              if [ "$NGINX" = "healthy" ]; then
                echo "- ‚úÖ Nginx: Healthy" >> health-summary.md
              else
                echo "- ‚ùå Nginx: Unhealthy" >> health-summary.md
              fi
              
              echo "" >> health-summary.md
            fi
          done
          
          echo "## üîó Links" >> health-summary.md
          echo "- [View detailed reports](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> health-summary.md
          echo "- [Monitoring Dashboard](https://your-monitoring-url.com)" >> health-summary.md
          
          cat health-summary.md
      
      - name: Upload Health Summary
        uses: actions/upload-artifact@v4
        with:
          name: health-summary
          path: health-summary.md
          retention-days: 30