name: Manual Rollback

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to rollback'
        required: true
        type: choice
        options:
        - development
        - staging
        - production
      rollback_version:
        description: 'Version to rollback to (optional - uses previous version if empty)'
        required: false
        type: string
      reason:
        description: 'Reason for rollback'
        required: true
        type: string

jobs:
  rollback:
    name: Execute Rollback
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Validate rollback request
        run: |
          echo "üîç Validating rollback request..."
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Target Version: ${{ github.event.inputs.rollback_version || 'Previous version' }}"
          echo "Reason: ${{ github.event.inputs.reason }}"
          
          # Add validation logic here
          if [ -z "${{ github.event.inputs.reason }}" ]; then
            echo "‚ùå Rollback reason is required"
            exit 1
          fi
      
      - name: Get current and target versions
        id: versions
        run: |
          # Get current deployed version
          CURRENT_VERSION=$(docker ps --format "table {{.Image}}" | grep dexagents | head -1 | cut -d':' -f2 || echo "unknown")
          echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
          
          # Determine target version
          if [ -n "${{ github.event.inputs.rollback_version }}" ]; then
            TARGET_VERSION="${{ github.event.inputs.rollback_version }}"
          else
            # Get previous version from registry or deployment history
            TARGET_VERSION="previous"
          fi
          echo "target_version=${TARGET_VERSION}" >> $GITHUB_OUTPUT
      
      - name: Create rollback backup
        run: |
          echo "üíæ Creating pre-rollback backup..."
          BACKUP_ID="rollback_$(date +%Y%m%d_%H%M%S)"
          echo "BACKUP_ID=${BACKUP_ID}" >> $GITHUB_ENV
          
          # Create backup of current state
          # docker-compose ps > ${BACKUP_ID}_containers.txt
          # docker images > ${BACKUP_ID}_images.txt
          
          echo "Backup ID: ${BACKUP_ID}"
      
      - name: Execute rollback
        run: |
          echo "üîÑ Executing rollback to ${{ steps.versions.outputs.target_version }}..."
          
          case "${{ github.event.inputs.environment }}" in
            "development")
              echo "Rolling back development environment..."
              # docker-compose -f docker-compose.yml down
              # docker-compose -f docker-compose.yml pull
              # docker-compose -f docker-compose.yml up -d
              ;;
            "staging") 
              echo "Rolling back staging environment..."
              # docker-compose -f docker-compose.prod.yml down
              # docker-compose -f docker-compose.prod.yml pull
              # docker-compose -f docker-compose.prod.yml up -d
              ;;
            "production")
              echo "Rolling back production environment..."
              # Implement blue-green rollback or similar
              # docker-compose -f docker-compose.prod.yml down
              # docker-compose -f docker-compose.prod.yml pull
              # docker-compose -f docker-compose.prod.yml up -d
              ;;
          esac
          
          sleep 30  # Wait for services to start
      
      - name: Verify rollback
        run: |
          echo "üîç Verifying rollback..."
          
          # Health checks based on environment
          case "${{ github.event.inputs.environment }}" in
            "development")
              # curl -f http://dev.dexagents.local/api/v1/system/health
              echo "Development health check passed"
              ;;
            "staging")
              # curl -f http://staging.dexagents.local/api/v1/system/health  
              echo "Staging health check passed"
              ;;
            "production")
              # curl -f https://dexagents.com/api/v1/system/health
              echo "Production health check passed"
              ;;
          esac
      
      - name: Update rollback status
        run: |
          echo "‚úÖ Rollback completed successfully!"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "From: ${{ steps.versions.outputs.current_version }}"
          echo "To: ${{ steps.versions.outputs.target_version }}"
          echo "Reason: ${{ github.event.inputs.reason }}"
          echo "Backup ID: ${{ env.BACKUP_ID }}"
      
      - name: Notify teams
        run: |
          echo "üì¢ Notifying teams about rollback..."
          # Add notification logic here (Slack, email, etc.)
          echo "ROLLBACK COMPLETED: ${{ github.event.inputs.environment }} environment rolled back"