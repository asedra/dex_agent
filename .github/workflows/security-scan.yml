name: Security Scan

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'frontend/package*.json'
      - 'backend/requirements.txt'
      - 'Dockerfile*'

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Frontend dependency scan
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Frontend security audit
        working-directory: ./frontend
        run: |
          echo "🔍 Running npm audit..."
          npm audit --audit-level=moderate --production || true
          
          # Generate audit report
          npm audit --json > ../security-reports/npm-audit.json || true
        continue-on-error: true
      
      # Backend dependency scan
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit semgrep
          pip install -r requirements.txt
      
      - name: Backend security scan with Safety
        working-directory: ./backend
        run: |
          echo "🔍 Running Safety scan..."
          safety check -r requirements.txt --json > ../security-reports/safety-report.json || true
        continue-on-error: true
      
      - name: Backend static analysis with Bandit
        working-directory: ./backend
        run: |
          echo "🔍 Running Bandit scan..."
          bandit -r . -f json -o ../security-reports/bandit-report.json || true
        continue-on-error: true
      
      - name: Semgrep security scan
        run: |
          echo "🔍 Running Semgrep scan..."
          semgrep --config=auto --json --output=security-reports/semgrep-report.json . || true
        continue-on-error: true
      
      - name: Create security reports directory
        run: mkdir -p security-reports
      
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: security-reports/
          retention-days: 30

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build images for scanning
        run: |
          docker build -t dexagents-frontend:security-scan ./frontend
          docker build -t dexagents-backend:security-scan ./backend
      
      # Trivy container scanning
      - name: Run Trivy vulnerability scanner on frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'dexagents-frontend:security-scan'
          format: 'sarif'
          output: 'trivy-frontend.sarif'
      
      - name: Run Trivy vulnerability scanner on backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'dexagents-backend:security-scan'
          format: 'sarif'
          output: 'trivy-backend.sarif'
      
      # Grype container scanning
      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
      
      - name: Scan frontend image with Grype
        run: |
          grype dexagents-frontend:security-scan -o json > grype-frontend.json || true
        continue-on-error: true
      
      - name: Scan backend image with Grype  
        run: |
          grype dexagents-backend:security-scan -o json > grype-backend.json || true
        continue-on-error: true
      
      # Docker Scout scanning
      - name: Docker Scout scan frontend
        run: |
          docker scout cves dexagents-frontend:security-scan --output sarif --file scout-frontend.sarif || true
        continue-on-error: true
      
      - name: Docker Scout scan backend
        run: |
          docker scout cves dexagents-backend:security-scan --output sarif --file scout-backend.sarif || true
        continue-on-error: true
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: '.'
        continue-on-error: true
      
      - name: Upload container scan reports
        uses: actions/upload-artifact@v4
        with:
          name: container-scan-reports
          path: |
            *.json
            *.sarif
          retention-days: 30

  compliance-scan:
    name: Compliance & Best Practices
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Dockerfile best practices scan
        run: |
          # Install hadolint
          wget -O hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
          chmod +x hadolint
          sudo mv hadolint /usr/local/bin/
          
          echo "🔍 Scanning Dockerfiles with hadolint..."
          hadolint frontend/Dockerfile --format json > hadolint-frontend.json || true
          hadolint backend/Dockerfile --format json > hadolint-backend.json || true
        continue-on-error: true
      
      - name: Docker Compose security scan
        run: |
          echo "🔍 Checking Docker Compose security..."
          # Check for security issues in compose files
          if grep -q "privileged.*true" docker-compose*.yml; then
            echo "⚠️ WARNING: Privileged containers found"
          fi
          
          if grep -q "network_mode.*host" docker-compose*.yml; then
            echo "⚠️ WARNING: Host network mode found"
          fi
          
          if grep -q "volumes.*:/.*:.*rw" docker-compose*.yml; then
            echo "ℹ️ INFO: Read-write volume mounts found"
          fi
      
      - name: Check secrets and sensitive data
        run: |
          echo "🔍 Scanning for secrets and sensitive data..."
          
          # Install truffleHog
          docker run --rm -v "$PWD:/pwd" trufflesecurity/trufflehog:latest github --repo file:///pwd --json > trufflehog-report.json || true
        continue-on-error: true
      
      - name: Upload compliance reports
        uses: actions/upload-artifact@v4
        with:
          name: compliance-reports
          path: |
            hadolint-*.json
            trufflehog-report.json
          retention-days: 30

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-scan, compliance-scan]
    if: always()
    
    steps:
      - name: Download all security reports
        uses: actions/download-artifact@v4
        with:
          path: all-reports
      
      - name: Generate security summary
        run: |
          echo "# 🔒 Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "**Scan Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> security-summary.md
          echo "**Repository:** ${{ github.repository }}" >> security-summary.md
          echo "**Commit:** ${{ github.sha }}" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "## 📊 Scan Results" >> security-summary.md
          
          # Dependency Scan Results
          echo "### Dependencies" >> security-summary.md
          if [ -f "all-reports/security-reports/npm-audit.json" ]; then
            echo "- ✅ Frontend dependencies scanned" >> security-summary.md
          else
            echo "- ❌ Frontend dependency scan failed" >> security-summary.md
          fi
          
          if [ -f "all-reports/security-reports/safety-report.json" ]; then
            echo "- ✅ Backend dependencies scanned" >> security-summary.md
          else
            echo "- ❌ Backend dependency scan failed" >> security-summary.md
          fi
          
          # Container Scan Results
          echo "### Containers" >> security-summary.md
          if [ -f "all-reports/container-scan-reports/trivy-frontend.sarif" ]; then
            echo "- ✅ Frontend container scanned" >> security-summary.md
          else
            echo "- ❌ Frontend container scan failed" >> security-summary.md
          fi
          
          if [ -f "all-reports/container-scan-reports/trivy-backend.sarif" ]; then
            echo "- ✅ Backend container scanned" >> security-summary.md
          else
            echo "- ❌ Backend container scan failed" >> security-summary.md
          fi
          
          # Compliance Results
          echo "### Compliance" >> security-summary.md
          if [ -f "all-reports/compliance-reports/hadolint-frontend.json" ]; then
            echo "- ✅ Dockerfile best practices checked" >> security-summary.md
          else
            echo "- ❌ Dockerfile compliance scan failed" >> security-summary.md
          fi
          
          echo "" >> security-summary.md
          echo "## 🔗 Links" >> security-summary.md
          echo "- [View detailed reports in artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> security-summary.md
          echo "- [Security tab](${{ github.server_url }}/${{ github.repository }}/security)" >> security-summary.md
          
          cat security-summary.md
      
      - name: Comment PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
      
      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md
          retention-days: 90